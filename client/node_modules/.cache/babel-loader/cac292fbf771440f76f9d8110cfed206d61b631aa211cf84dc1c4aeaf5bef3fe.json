{"ast":null,"code":"var _jsxFileName = \"/Users/krushna/aboutus/client/src/context/Jobs/JobsState.js\",\n  _s = $RefreshSig$();\n// context/Jobs/JobState.js\nimport React, { useState } from \"react\";\nimport JobContext from './jobsContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst JobState = props => {\n  _s();\n  let HOST_URL = 'http://localhost:5001/';\n  const initialJobs = [];\n  const [jobs, setJobs] = useState(initialJobs);\n\n  // Add Jobs \n  const addJob = async newJob => {\n    const {\n      jobTitle,\n      jobDescription,\n      jobSalary,\n      jobType,\n      jobCompany\n    } = newJob;\n    try {\n      const response = await fetch(`${HOST_URL}api/jobs/addjob`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'auth_token': 'your_auth_token_here'\n        },\n        body: JSON.stringify({\n          jobTitle,\n          jobDescription,\n          jobSalary,\n          jobType,\n          jobCompany\n        })\n      });\n\n      // Check if response is OK (status 200-299)\n      if (!response.ok) {\n        throw new Error(`Failed to add job: ${response.statusText}`);\n      }\n\n      // Parse response to confirm new job creation\n      const addedJob = await response.json();\n      console.log(\"Job added successfully:\", addedJob);\n\n      // Update state with new job\n      setJobs([...jobs, addedJob]);\n    } catch (error) {\n      console.error(\"Error adding job:\", error);\n    }\n  };\n\n  // Delete Jobs\n  const deletejob = async id => {\n    try {\n      const response = await fetch(`${HOST_URL}api/jobs/deletejob/${id}`, {\n        method: 'DELETE',\n        headers: {\n          'Content-Type': 'application/json',\n          'auth_token': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjcxMDNjNGU2ZTFkZDE2NmUxMGNjMzE2In0sImlhdCI6MTcyOTExNzI2Mn0.3eJbc01Yo-qeFCffFx-O77reE-iER8vQCb7yYPGbf3w'\n        }\n      });\n      if (response.ok) {\n        // Remove the job from the local state\n        setJobs(jobs.filter(job => job._id !== id));\n        console.log(`Job with ID: ${id} deleted successfully`);\n      } else {\n        console.error(`Failed to delete job with ID: ${id}. Status: ${response.status}`);\n      }\n    } catch (error) {\n      console.error(\"Error deleting job:\", error);\n    }\n  };\n\n  // Edit Jobs \n  const editjob = async (id, jobTitle, jobDescription, jobSalary, jobType, jobCompany) => {\n    try {\n      const response = await fetch(`${HOST_URL}api/jobs/updatejob/${id}`, {\n        method: 'PUT',\n        // Use PUT or PATCH here based on backend requirements\n        headers: {\n          'Content-Type': 'application/json',\n          'auth_token': 'your_auth_token_here'\n        },\n        body: JSON.stringify({\n          jobTitle,\n          jobDescription,\n          jobSalary,\n          jobType,\n          jobCompany\n        })\n      });\n      if (response.ok) {\n        setJobs(jobs.map(job => job._id === id ? {\n          ...job,\n          jobTitle,\n          jobDescription,\n          jobSalary,\n          jobType,\n          jobCompany\n        } : job));\n      } else {\n        console.error(`Failed to edit job with ID: ${id}. Status: ${response.status}`);\n      }\n    } catch (error) {\n      console.error(\"Error editing job:\", error);\n    }\n  };\n\n  // Fetch All Jobs\n  const getalljobs = async () => {\n    try {\n      const response = await fetch(`${HOST_URL}api/jobs/fetchalljobs`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          'auth_token': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjcxMDNjNGU2ZTFkZDE2NmUxMGNjMzE2In0sImlhdCI6MTcyOTExNzI2Mn0.3eJbc01Yo-qeFCffFx-O77reE-iER8vQCb7yYPGbf3w'\n        }\n      });\n      const res = await response.json();\n      console.log(res);\n      setJobs(res); // Update state with fetched jobs\n    } catch (error) {\n      console.error(\"Error fetching jobs:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(JobContext.Provider, {\n    value: {\n      jobs,\n      addJob,\n      deletejob,\n      editjob,\n      getalljobs\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 5\n  }, this);\n};\n_s(JobState, \"naLDAEbF0yW0dhvYvjzKTUCWZK4=\");\n_c = JobState;\nexport default JobState;\nvar _c;\n$RefreshReg$(_c, \"JobState\");","map":{"version":3,"names":["React","useState","JobContext","jsxDEV","_jsxDEV","JobState","props","_s","HOST_URL","initialJobs","jobs","setJobs","addJob","newJob","jobTitle","jobDescription","jobSalary","jobType","jobCompany","response","fetch","method","headers","body","JSON","stringify","ok","Error","statusText","addedJob","json","console","log","error","deletejob","id","filter","job","_id","status","editjob","map","getalljobs","res","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/krushna/aboutus/client/src/context/Jobs/JobsState.js"],"sourcesContent":["// context/Jobs/JobState.js\nimport React, { useState } from \"react\";\nimport JobContext from './jobsContext';\n\nconst JobState = (props) => {\n  let HOST_URL = 'http://localhost:5001/';\n  const initialJobs = [];\n  const [jobs, setJobs] = useState(initialJobs);\n\n  // Add Jobs \n  const addJob = async (newJob) => {\n    const { jobTitle, jobDescription, jobSalary, jobType, jobCompany } = newJob;\n    try {\n      const response = await fetch(`${HOST_URL}api/jobs/addjob`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'auth_token': 'your_auth_token_here',\n        },\n        body: JSON.stringify({ jobTitle, jobDescription, jobSalary, jobType, jobCompany }),\n      });\n  \n      // Check if response is OK (status 200-299)\n      if (!response.ok) {\n        throw new Error(`Failed to add job: ${response.statusText}`);\n      }\n  \n      // Parse response to confirm new job creation\n      const addedJob = await response.json();\n      console.log(\"Job added successfully:\", addedJob);\n  \n      // Update state with new job\n      setJobs([...jobs, addedJob]);\n    } catch (error) {\n      console.error(\"Error adding job:\", error);\n    }\n  };\n\n  // Delete Jobs\n  const deletejob = async (id) => {\n    try {\n      const response = await fetch(`${HOST_URL}api/jobs/deletejob/${id}`, {\n        method: 'DELETE',\n        headers: {\n          'Content-Type': 'application/json',\n          'auth_token': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjcxMDNjNGU2ZTFkZDE2NmUxMGNjMzE2In0sImlhdCI6MTcyOTExNzI2Mn0.3eJbc01Yo-qeFCffFx-O77reE-iER8vQCb7yYPGbf3w',\n        }\n      });\n\n      if (response.ok) {\n        // Remove the job from the local state\n        setJobs(jobs.filter(job => job._id !== id));\n        console.log(`Job with ID: ${id} deleted successfully`);\n      } else {\n        console.error(`Failed to delete job with ID: ${id}. Status: ${response.status}`);\n      }\n    } catch (error) {\n      console.error(\"Error deleting job:\", error);\n    }\n  };\n\n  // Edit Jobs \n  const editjob = async (id, jobTitle, jobDescription, jobSalary, jobType, jobCompany) => {\n    try {\n      const response = await fetch(`${HOST_URL}api/jobs/updatejob/${id}`, {\n        method: 'PUT',  // Use PUT or PATCH here based on backend requirements\n        headers: {\n          'Content-Type': 'application/json',\n          'auth_token': 'your_auth_token_here',\n        },\n        body: JSON.stringify({ jobTitle, jobDescription, jobSalary, jobType, jobCompany }),\n      });\n\n      if (response.ok) {\n        setJobs(jobs.map(job =>\n          job._id === id\n            ? { ...job, jobTitle, jobDescription, jobSalary, jobType, jobCompany }\n            : job\n        ));\n      } else {\n        console.error(`Failed to edit job with ID: ${id}. Status: ${response.status}`);\n      }\n    } catch (error) {\n      console.error(\"Error editing job:\", error);\n    }\n  };\n\n  // Fetch All Jobs\n  const getalljobs = async () => {\n    try {\n      const response = await fetch(`${HOST_URL}api/jobs/fetchalljobs`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          'auth_token': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjcxMDNjNGU2ZTFkZDE2NmUxMGNjMzE2In0sImlhdCI6MTcyOTExNzI2Mn0.3eJbc01Yo-qeFCffFx-O77reE-iER8vQCb7yYPGbf3w',\n        }\n      });\n\n      const res = await response.json();\n      console.log(res);\n      setJobs(res);  // Update state with fetched jobs\n    } catch (error) {\n      console.error(\"Error fetching jobs:\", error);\n    }\n  };\n\n  return (\n    <JobContext.Provider value={{ jobs, addJob, deletejob, editjob, getalljobs }}>\n      {props.children}\n    </JobContext.Provider>\n  );\n};\n\nexport default JobState;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}