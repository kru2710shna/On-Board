{"ast":null,"code":"var _jsxFileName = \"/Users/krushna/aboutus/client/src/components/News.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst apiKey = process.env.REACT_APP_NEWS_API_KEY;\nexport class News extends Component {\n  constructor(props) {\n    super(props);\n    this.updateIframeStyle = () => {\n      if (this.iframeRef.current) {\n        const mode = this.props.isDarkMode ? 'dark' : 'light';\n        this.iframeRef.current.contentWindow.postMessage({\n          darkMode: mode\n        }, '*'); // Send dark mode state to iframe\n      }\n    };\n    this.handlePrevClick = async () => {\n      console.log(\"Previous\");\n      this.setState({\n        page: this.state.page - 1\n      });\n      this.update();\n    };\n    this.handleNextClick = async () => {\n      console.log(\"Next\");\n      this.setState({\n        page: this.state.page + 1\n      });\n      this.update();\n    };\n    this.handleResize = () => {\n      if (this.iframeRef.current) {\n        this.iframeRef.current.style.width = '100%';\n        this.iframeRef.current.style.height = `${window.innerHeight}px`; // Set height dynamically\n      }\n    };\n    this.state = {\n      articles: [],\n      loading: false,\n      page: 1,\n      totalResults: 0,\n      darkMode: false\n    };\n    document.title = `${this.props.category} - On-Board Break`;\n    this.iframeRef = /*#__PURE__*/React.createRef(); // Initialize iframeRef\n  }\n  async update() {\n    const url = `https://newsapi.org/v2/top-headlines?country=${this.props.country}&category=${this.props.category}&apiKey=${apiKey}&page=${this.state.page}&pageSize=${this.props.pageSize}`;\n    this.setState({\n      loading: true\n    });\n    let data = await fetch(url);\n    let parsedData = await data.json();\n    console.log('Parsed Data:', parsedData);\n    this.setState({\n      articles: parsedData.articles,\n      totalResults: parsedData.totalResults,\n      loading: false\n    });\n  }\n  componentDidMount() {\n    // Fetch articles\n    this.update();\n    // Update the iframe style after fetching articles\n    this.updateIframeStyle();\n    window.addEventListener('resize', this.handleResize);\n    window.addEventListener('message', this.handleMessage); // Listen for messages from the parent\n  }\n  componentDidUpdate(prevProps) {\n    // Update iframe style if dark mode changes\n    if (prevProps.isDarkMode !== this.props.isDarkMode) {\n      this.updateIframeStyle();\n    }\n  }\n  componentWillUnmount() {\n    window.removeEventListener('message', this.handleMessage); // Clean up listener\n    window.removeEventListener('resize', this.handleResize);\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"iframe\", {\n        id: \"news-iframe\",\n        title: \"News Content\" // Add a title for accessibility\n        ,\n        src: \"http://localhost:3001\",\n        ref: this.iframeRef,\n        height: \"1000\",\n        width: \"1680\",\n        frameBorder: \"0\",\n        scrolling: \"yes\",\n        style: {\n          backgroundColor: this.props.isDarkMode ? '#333' : '#fff'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }, this)\n    }, void 0, false);\n  }\n}\nNews.defaultProps = {\n  country: 'in',\n  pageSize: 8,\n  category: 'general'\n};\nNews.propTypes = {\n  country: PropTypes.string,\n  pageSize: PropTypes.number,\n  category: PropTypes.string,\n  isDarkMode: PropTypes.bool\n};\nexport default News;","map":{"version":3,"names":["React","Component","PropTypes","jsxDEV","_jsxDEV","Fragment","_Fragment","apiKey","process","env","REACT_APP_NEWS_API_KEY","News","constructor","props","updateIframeStyle","iframeRef","current","mode","isDarkMode","contentWindow","postMessage","darkMode","handlePrevClick","console","log","setState","page","state","update","handleNextClick","handleResize","style","width","height","window","innerHeight","articles","loading","totalResults","document","title","category","createRef","url","country","pageSize","data","fetch","parsedData","json","componentDidMount","addEventListener","handleMessage","componentDidUpdate","prevProps","componentWillUnmount","removeEventListener","render","children","id","src","ref","frameBorder","scrolling","backgroundColor","fileName","_jsxFileName","lineNumber","columnNumber","defaultProps","propTypes","string","number","bool"],"sources":["/Users/krushna/aboutus/client/src/components/News.js"],"sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nconst apiKey = process.env.REACT_APP_NEWS_API_KEY;\n\nexport class News extends Component {\n    static defaultProps = {\n        country: 'in',\n        pageSize: 8,\n        category: 'general',\n    }\n\n    static propTypes = {\n        country: PropTypes.string,\n        pageSize: PropTypes.number,\n        category: PropTypes.string,\n        isDarkMode: PropTypes.bool,\n    }\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            articles: [],\n            loading: false,\n            page: 1,\n            totalResults: 0,\n            darkMode: false\n        }\n        document.title = `${this.props.category} - On-Board Break`;\n        this.iframeRef = React.createRef(); // Initialize iframeRef\n    }\n\n    async update() {\n        const url = `https://newsapi.org/v2/top-headlines?country=${this.props.country}&category=${this.props.category}&apiKey=${apiKey}&page=${this.state.page}&pageSize=${this.props.pageSize}`;\n        this.setState({ loading: true });\n        let data = await fetch(url);\n        let parsedData = await data.json();\n        console.log('Parsed Data:', parsedData);\n        this.setState({\n            articles: parsedData.articles,\n            totalResults: parsedData.totalResults,\n            loading: false\n        });\n    }\n\n    updateIframeStyle = () => {\n        if (this.iframeRef.current) {\n            const mode = this.props.isDarkMode ? 'dark' : 'light';\n            this.iframeRef.current.contentWindow.postMessage({ darkMode: mode }, '*'); // Send dark mode state to iframe\n        }\n    };\n\n    componentDidMount() {\n        // Fetch articles\n        this.update();\n        // Update the iframe style after fetching articles\n        this.updateIframeStyle();\n        window.addEventListener('resize', this.handleResize); \n        window.addEventListener('message', this.handleMessage); // Listen for messages from the parent\n    }\n\n    componentDidUpdate(prevProps) {\n        // Update iframe style if dark mode changes\n        if (prevProps.isDarkMode !== this.props.isDarkMode) {\n            this.updateIframeStyle();\n        }\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('message', this.handleMessage); // Clean up listener\n        window.removeEventListener('resize', this.handleResize); \n    }\n\n    handlePrevClick = async () => {\n        console.log(\"Previous\");\n        this.setState({ page: this.state.page - 1 });\n        this.update();\n    }\n\n    handleNextClick = async () => {\n        console.log(\"Next\");\n        this.setState({ page: this.state.page + 1 });\n        this.update();\n    }\n    handleResize = () => {\n        if (this.iframeRef.current) {\n            this.iframeRef.current.style.width = '100%';\n            this.iframeRef.current.style.height = `${window.innerHeight}px`; // Set height dynamically\n        }\n    };\n\n    render() {\n        return (\n            <>\n                <iframe \n                    id=\"news-iframe\" \n                    title=\"News Content\" // Add a title for accessibility\n                    src=\"http://localhost:3001\" \n                    ref={this.iframeRef} \n                    height=\"1000\" \n                    width=\"1680\" \n                    frameBorder=\"0\" \n                    scrolling=\"yes\" \n                    style={{ backgroundColor: this.props.isDarkMode ? '#333' : '#fff' }} \n                />\n            </>\n        )\n    }\n}\n\nexport default News;\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAOC,SAAS,MAAM,YAAY;AAAA,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAElC,MAAMC,MAAM,GAAGC,OAAO,CAACC,GAAG,CAACC,sBAAsB;AAEjD,OAAO,MAAMC,IAAI,SAASV,SAAS,CAAC;EAchCW,WAAWA,CAACC,KAAK,EAAE;IACf,KAAK,CAACA,KAAK,CAAC;IAAC,KAyBjBC,iBAAiB,GAAG,MAAM;MACtB,IAAI,IAAI,CAACC,SAAS,CAACC,OAAO,EAAE;QACxB,MAAMC,IAAI,GAAG,IAAI,CAACJ,KAAK,CAACK,UAAU,GAAG,MAAM,GAAG,OAAO;QACrD,IAAI,CAACH,SAAS,CAACC,OAAO,CAACG,aAAa,CAACC,WAAW,CAAC;UAAEC,QAAQ,EAAEJ;QAAK,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;MAC/E;IACJ,CAAC;IAAA,KAuBDK,eAAe,GAAG,YAAY;MAC1BC,OAAO,CAACC,GAAG,CAAC,UAAU,CAAC;MACvB,IAAI,CAACC,QAAQ,CAAC;QAAEC,IAAI,EAAE,IAAI,CAACC,KAAK,CAACD,IAAI,GAAG;MAAE,CAAC,CAAC;MAC5C,IAAI,CAACE,MAAM,CAAC,CAAC;IACjB,CAAC;IAAA,KAEDC,eAAe,GAAG,YAAY;MAC1BN,OAAO,CAACC,GAAG,CAAC,MAAM,CAAC;MACnB,IAAI,CAACC,QAAQ,CAAC;QAAEC,IAAI,EAAE,IAAI,CAACC,KAAK,CAACD,IAAI,GAAG;MAAE,CAAC,CAAC;MAC5C,IAAI,CAACE,MAAM,CAAC,CAAC;IACjB,CAAC;IAAA,KACDE,YAAY,GAAG,MAAM;MACjB,IAAI,IAAI,CAACf,SAAS,CAACC,OAAO,EAAE;QACxB,IAAI,CAACD,SAAS,CAACC,OAAO,CAACe,KAAK,CAACC,KAAK,GAAG,MAAM;QAC3C,IAAI,CAACjB,SAAS,CAACC,OAAO,CAACe,KAAK,CAACE,MAAM,GAAG,GAAGC,MAAM,CAACC,WAAW,IAAI,CAAC,CAAC;MACrE;IACJ,CAAC;IApEG,IAAI,CAACR,KAAK,GAAG;MACTS,QAAQ,EAAE,EAAE;MACZC,OAAO,EAAE,KAAK;MACdX,IAAI,EAAE,CAAC;MACPY,YAAY,EAAE,CAAC;MACfjB,QAAQ,EAAE;IACd,CAAC;IACDkB,QAAQ,CAACC,KAAK,GAAG,GAAG,IAAI,CAAC3B,KAAK,CAAC4B,QAAQ,mBAAmB;IAC1D,IAAI,CAAC1B,SAAS,gBAAGf,KAAK,CAAC0C,SAAS,CAAC,CAAC,CAAC,CAAC;EACxC;EAEA,MAAMd,MAAMA,CAAA,EAAG;IACX,MAAMe,GAAG,GAAG,gDAAgD,IAAI,CAAC9B,KAAK,CAAC+B,OAAO,aAAa,IAAI,CAAC/B,KAAK,CAAC4B,QAAQ,WAAWlC,MAAM,SAAS,IAAI,CAACoB,KAAK,CAACD,IAAI,aAAa,IAAI,CAACb,KAAK,CAACgC,QAAQ,EAAE;IACzL,IAAI,CAACpB,QAAQ,CAAC;MAAEY,OAAO,EAAE;IAAK,CAAC,CAAC;IAChC,IAAIS,IAAI,GAAG,MAAMC,KAAK,CAACJ,GAAG,CAAC;IAC3B,IAAIK,UAAU,GAAG,MAAMF,IAAI,CAACG,IAAI,CAAC,CAAC;IAClC1B,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEwB,UAAU,CAAC;IACvC,IAAI,CAACvB,QAAQ,CAAC;MACVW,QAAQ,EAAEY,UAAU,CAACZ,QAAQ;MAC7BE,YAAY,EAAEU,UAAU,CAACV,YAAY;MACrCD,OAAO,EAAE;IACb,CAAC,CAAC;EACN;EASAa,iBAAiBA,CAAA,EAAG;IAChB;IACA,IAAI,CAACtB,MAAM,CAAC,CAAC;IACb;IACA,IAAI,CAACd,iBAAiB,CAAC,CAAC;IACxBoB,MAAM,CAACiB,gBAAgB,CAAC,QAAQ,EAAE,IAAI,CAACrB,YAAY,CAAC;IACpDI,MAAM,CAACiB,gBAAgB,CAAC,SAAS,EAAE,IAAI,CAACC,aAAa,CAAC,CAAC,CAAC;EAC5D;EAEAC,kBAAkBA,CAACC,SAAS,EAAE;IAC1B;IACA,IAAIA,SAAS,CAACpC,UAAU,KAAK,IAAI,CAACL,KAAK,CAACK,UAAU,EAAE;MAChD,IAAI,CAACJ,iBAAiB,CAAC,CAAC;IAC5B;EACJ;EAEAyC,oBAAoBA,CAAA,EAAG;IACnBrB,MAAM,CAACsB,mBAAmB,CAAC,SAAS,EAAE,IAAI,CAACJ,aAAa,CAAC,CAAC,CAAC;IAC3DlB,MAAM,CAACsB,mBAAmB,CAAC,QAAQ,EAAE,IAAI,CAAC1B,YAAY,CAAC;EAC3D;EAoBA2B,MAAMA,CAAA,EAAG;IACL,oBACIrD,OAAA,CAAAE,SAAA;MAAAoD,QAAA,eACItD,OAAA;QACIuD,EAAE,EAAC,aAAa;QAChBnB,KAAK,EAAC,cAAc,CAAC;QAAA;QACrBoB,GAAG,EAAC,uBAAuB;QAC3BC,GAAG,EAAE,IAAI,CAAC9C,SAAU;QACpBkB,MAAM,EAAC,MAAM;QACbD,KAAK,EAAC,MAAM;QACZ8B,WAAW,EAAC,GAAG;QACfC,SAAS,EAAC,KAAK;QACfhC,KAAK,EAAE;UAAEiC,eAAe,EAAE,IAAI,CAACnD,KAAK,CAACK,UAAU,GAAG,MAAM,GAAG;QAAO;MAAE;QAAA+C,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACvE;IAAC,gBACJ,CAAC;EAEX;AACJ;AAvGazD,IAAI,CACN0D,YAAY,GAAG;EAClBzB,OAAO,EAAE,IAAI;EACbC,QAAQ,EAAE,CAAC;EACXJ,QAAQ,EAAE;AACd,CAAC;AALQ9B,IAAI,CAON2D,SAAS,GAAG;EACf1B,OAAO,EAAE1C,SAAS,CAACqE,MAAM;EACzB1B,QAAQ,EAAE3C,SAAS,CAACsE,MAAM;EAC1B/B,QAAQ,EAAEvC,SAAS,CAACqE,MAAM;EAC1BrD,UAAU,EAAEhB,SAAS,CAACuE;AAC1B,CAAC;AA6FL,eAAe9D,IAAI","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}