{"ast":null,"code":"var _jsxFileName = \"/Users/krushna/aboutus/client/src/context/Jobs/JobsState.js\",\n  _s = $RefreshSig$();\n// context/Jobs/JobState.js\nimport React, { useState } from \"react\";\nimport JobContext from './jobsContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst JobState = props => {\n  _s();\n  let HOST_URL = 'http://localhost:5001/';\n  const initialJobs = [{\n    \"_id\": \"67118e4107d611d4bebbbadb\",\n    \"jobTitle\": \"DevOps Engineer\",\n    \"jobDescription\": \"Manage infrastructure, automate workflows, and ensure efficient CI/CD processes.\",\n    \"jobSalary\": \"85000\",\n    \"jobType\": \"Full-time\",\n    \"jobCompany\": \"CloudTech Solutions\"\n  }, {\n    \"_id\": \"671299b7f2d437f7c651923a\",\n    \"jobTitle\": \"Machine Learning Engineer\",\n    \"jobDescription\": \"Develop machine learning models and integrate them into scalable applications.\",\n    \"jobSalary\": \"105000\",\n    \"jobType\": \"Full-time\",\n    \"jobCompany\": \"AI Innovators Inc.\"\n  }, {\n    \"_id\": \"6712a2c4f2d437f7c651923c\",\n    \"jobTitle\": \"Mobile App Developer\",\n    \"jobDescription\": \"Design and build advanced applications for mobile platforms.\",\n    \"jobSalary\": \"90000\",\n    \"jobType\": \"Full-time\",\n    \"jobCompany\": \"AppDev Solutions\"\n  }];\n  const [jobs, setJobs] = useState(initialJobs);\n\n  // Add Jobs \n  const addJob = async newJob => {\n    const {\n      jobTitle,\n      jobDescription,\n      jobSalary,\n      jobType,\n      jobCompany\n    } = newJob;\n    try {\n      const response = await fetch(`${HOST_URL}api/jobs/addjob`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'auth_token': 'your-auth-token'\n        },\n        body: JSON.stringify({\n          jobTitle,\n          jobDescription,\n          jobSalary,\n          jobType,\n          jobCompany\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      const job = {\n        ...newJob,\n        _id: Date.now().toString(),\n        date: new Date().toISOString()\n      };\n      setJobs([...jobs, job]);\n    } catch (error) {\n      console.error(\"Error adding job:\", error); // Log the error for debugging\n    }\n  };\n\n  // Delete Jobs\n  const deletejob = id => {\n    console.log(`Deleting job with ID: ${id}`);\n    setJobs(jobs.filter(job => job._id !== id)); // Filter out the job with matching ID\n  };\n\n  // Edit Jobs \n  const editjob = async (id, jobTitle, jobDescription, jobSalary, jobType, jobCompany) => {\n    // Make API call to update job\n    await fetch(`${HOST_URL}api/jobs/updatejob/${id}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'auth_token': 'your-auth-token'\n      },\n      body: JSON.stringify({\n        jobTitle,\n        jobDescription,\n        jobSalary,\n        jobType,\n        jobCompany\n      })\n    });\n\n    // Update the state locally\n    setJobs(jobs.map(job => job._id === id ? {\n      ...job,\n      jobTitle,\n      jobDescription,\n      jobSalary,\n      jobType,\n      jobCompany\n    } : job));\n  };\n  return /*#__PURE__*/_jsxDEV(JobContext.Provider, {\n    value: {\n      jobs,\n      addJob,\n      deletejob,\n      editjob\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n};\n_s(JobState, \"naLDAEbF0yW0dhvYvjzKTUCWZK4=\");\n_c = JobState;\nexport default JobState;\nvar _c;\n$RefreshReg$(_c, \"JobState\");","map":{"version":3,"names":["React","useState","JobContext","jsxDEV","_jsxDEV","JobState","props","_s","HOST_URL","initialJobs","jobs","setJobs","addJob","newJob","jobTitle","jobDescription","jobSalary","jobType","jobCompany","response","fetch","method","headers","body","JSON","stringify","ok","Error","status","job","_id","Date","now","toString","date","toISOString","error","console","deletejob","id","log","filter","editjob","map","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/krushna/aboutus/client/src/context/Jobs/JobsState.js"],"sourcesContent":["// context/Jobs/JobState.js\nimport React, { useState } from \"react\";\nimport JobContext from './jobsContext';\n\nconst JobState = (props) => {\n  let HOST_URL = 'http://localhost:5001/';\n  const initialJobs = [\n    {\n      \"_id\": \"67118e4107d611d4bebbbadb\",\n      \"jobTitle\": \"DevOps Engineer\",\n      \"jobDescription\": \"Manage infrastructure, automate workflows, and ensure efficient CI/CD processes.\",\n      \"jobSalary\": \"85000\",\n      \"jobType\": \"Full-time\",\n      \"jobCompany\": \"CloudTech Solutions\",\n    },\n    {\n      \"_id\": \"671299b7f2d437f7c651923a\",\n      \"jobTitle\": \"Machine Learning Engineer\",\n      \"jobDescription\": \"Develop machine learning models and integrate them into scalable applications.\",\n      \"jobSalary\": \"105000\",\n      \"jobType\": \"Full-time\",\n      \"jobCompany\": \"AI Innovators Inc.\",\n    },\n    {\n      \"_id\": \"6712a2c4f2d437f7c651923c\",\n      \"jobTitle\": \"Mobile App Developer\",\n      \"jobDescription\": \"Design and build advanced applications for mobile platforms.\",\n      \"jobSalary\": \"90000\",\n      \"jobType\": \"Full-time\",\n      \"jobCompany\": \"AppDev Solutions\",\n    }\n  ];\n\n  const [jobs, setJobs] = useState(initialJobs);\n\n  // Add Jobs \n  const addJob = async (newJob) => {\n    const { jobTitle, jobDescription, jobSalary, jobType, jobCompany } = newJob;\n    try {\n      const response = await fetch(`${HOST_URL}api/jobs/addjob`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'auth_token': 'your-auth-token',\n        },\n        body: JSON.stringify({ jobTitle, jobDescription, jobSalary, jobType, jobCompany }),\n      });\n  \n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n  \n      const job = { ...newJob, _id: Date.now().toString(), date: new Date().toISOString() };\n      setJobs([...jobs, job]);\n    } catch (error) {\n      console.error(\"Error adding job:\", error);  // Log the error for debugging\n    }\n  };\n\n  // Delete Jobs\n  const deletejob = (id) => {\n    console.log(`Deleting job with ID: ${id}`);\n    setJobs(jobs.filter(job => job._id !== id));  // Filter out the job with matching ID\n  };\n\n  // Edit Jobs \n  const editjob = async (id, jobTitle, jobDescription, jobSalary, jobType, jobCompany) => {\n    // Make API call to update job\n    await fetch(\n      `${HOST_URL}api/jobs/updatejob/${id}`,\n      {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'auth_token': 'your-auth-token'\n        },\n        body: JSON.stringify({ jobTitle, jobDescription, jobSalary, jobType, jobCompany })\n      }\n    );\n\n    // Update the state locally\n    setJobs(jobs.map(job => \n      job._id === id \n        ? { ...job, jobTitle, jobDescription, jobSalary, jobType, jobCompany } \n        : job\n    ));\n  };\n\n  return (\n    <JobContext.Provider value={{ jobs, addJob, deletejob, editjob }}>\n      {props.children}\n    </JobContext.Provider>\n  );\n};\n\nexport default JobState;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}