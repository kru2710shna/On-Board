{"ast":null,"code":"var _jsxFileName = \"/Users/krushna/aboutus/client/src/components/Jobs.js\",\n  _s = $RefreshSig$();\nimport React, { useContext } from 'react';\nimport JobContext from '../context/Jobs/jobsContext';\nimport JobsItem from './JobsItem';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Jobs = () => {\n  _s();\n  const context = useContext(JobContext); // Ensure that the context is being used properly\n\n  // Check if context and jobs exist before destructuring\n  if (!context || !context.jobs) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"No jobs available\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 12\n    }, this); // Handle the case where jobs are not yet loaded\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Available Jobs\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this), jobs.map(job => {\n      return /*#__PURE__*/_jsxDEV(JobsItem, {\n        Job: job\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 16\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 5\n  }, this);\n};\n_s(Jobs, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n_c = Jobs;\nexport default Jobs;\nvar _c;\n$RefreshReg$(_c, \"Jobs\");","map":{"version":3,"names":["React","useContext","JobContext","JobsItem","jsxDEV","_jsxDEV","Jobs","_s","context","jobs","children","fileName","_jsxFileName","lineNumber","columnNumber","map","job","Job","_c","$RefreshReg$"],"sources":["/Users/krushna/aboutus/client/src/components/Jobs.js"],"sourcesContent":["import React, { useContext } from 'react';\nimport JobContext from '../context/Jobs/jobsContext'; \nimport JobsItem from './JobsItem';\n\nconst Jobs = () => {\n  const context = useContext(JobContext); // Ensure that the context is being used properly\n\n  // Check if context and jobs exist before destructuring\n  if (!context || !context.jobs) {\n    return <div>No jobs available</div>; // Handle the case where jobs are not yet loaded\n  }\n\n\n  return (\n    <div>\n      <h1>Available Jobs</h1>\n      {jobs.map((job) => {\n        return <JobsItem Job= {job} />\n      })}\n    </div>\n  );\n};\n\nexport default Jobs;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,UAAU,QAAQ,OAAO;AACzC,OAAOC,UAAU,MAAM,6BAA6B;AACpD,OAAOC,QAAQ,MAAM,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,MAAMC,IAAI,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjB,MAAMC,OAAO,GAAGP,UAAU,CAACC,UAAU,CAAC,CAAC,CAAC;;EAExC;EACA,IAAI,CAACM,OAAO,IAAI,CAACA,OAAO,CAACC,IAAI,EAAE;IAC7B,oBAAOJ,OAAA;MAAAK,QAAA,EAAK;IAAiB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,CAAC,CAAC;EACvC;EAGA,oBACET,OAAA;IAAAK,QAAA,gBACEL,OAAA;MAAAK,QAAA,EAAI;IAAc;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACtBL,IAAI,CAACM,GAAG,CAAEC,GAAG,IAAK;MACjB,oBAAOX,OAAA,CAACF,QAAQ;QAACc,GAAG,EAAGD;MAAI;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAChC,CAAC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAACP,EAAA,CAjBID,IAAI;AAAAY,EAAA,GAAJZ,IAAI;AAmBV,eAAeA,IAAI;AAAC,IAAAY,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}